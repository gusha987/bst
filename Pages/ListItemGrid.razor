<div class="dropdown">
    <button class="btn btn-secondary dropdown-toggle" @onclick="ToggleDropdown" type="button" aria-haspopup="true" aria-expanded="@isDropdownOpen">
        Sort By
    </button>
    <div class="@dropdownClass" aria-labelledby="dropdownMenuButton">
        <button class="dropdown-item" @onclick="() => SortList(SortOption.LastUsed)">Last Used</button>
        <button class="dropdown-item" @onclick="() => SortList(SortOption.LastModified)">Last Modified</button>
        <button class="dropdown-item" @onclick="() => SortList(SortOption.Name)">Name</button>
        <button class="dropdown-item" @onclick="() => SortList(SortOption.FavoritesFirst)">Favorites First</button>
    </div>
</div>

@if (SortedListItems != null)
{
    <div class="row row-cols-1 row-cols-md-2 g-4">
        @foreach (var item in SortedListItems)
        {
            <div class="col">
                <div class="card mb-3">
                    <a @onclick="() => UpdateLastUsed(item)">
                        <img src="@item.Url" class="card-img-top" alt="@item.Name" />
                    </a>
                    <div class="card-body">
                        <p>@item.Name</p>
                        <button class="btn btn-primary me-1" @onclick="() => EditItem(item)">Edit</button>
                        <button class="btn btn-danger" @onclick="() => DeleteItem(item)">Delete</button>
                        <button class="btn btn-warning" @onclick="() => ToggleFavorite(item)">
                            @if (item.IsFavorite)
                            {
                                <span>Unfavorite</span>
                            }
                            else
                            {
                                <span>Favorite</span>
                            }
                        </button>
                    </div>
                </div>
            </div>
        }
    </div>
}

@code {
    // Enum for sorting options
    public enum SortOption
    {
        LastUsed,
        LastModified,
        Name,
        FavoritesFirst
    }

    [Parameter]
    public List<Exercise> exercises { get; set; }

    public List<Exercise> SortedListItems { get; set; } 

    private SortOption currentSortOption = SortOption.LastUsed;
    private bool isDropdownOpen = false;

    private string dropdownClass => isDropdownOpen ? "dropdown-menu show" : "dropdown-menu";

    protected override void OnParametersSet()
    {
        // sorted lsit items with exercises
        SortedListItems = exercises;
    }

    
    private void SortList(SortOption sortOption)
    {
        currentSortOption = sortOption;

        // Sort by sorting options and logic
        SortedListItems = sortOption switch
        {
            SortOption.LastUsed => exercises.OrderByDescending(item => item.LastUsed).ToList(),
            SortOption.LastModified => exercises.OrderByDescending(item => item.LastEdited).ToList(),
            SortOption.Name => exercises.OrderBy(item => item.Name).ToList(),
            SortOption.FavoritesFirst => exercises.OrderByDescending(item => item.IsFavorite).ToList(),
            _ => SortedListItems
        };

        
        StateHasChanged();
    }

    //Edited function logic
    private void EditItem(Exercise exercise)
    {
        Console.WriteLine($"Editing {exercise.Name}");
        exercise.LastEdited = DateTime.Now;
        Console.WriteLine($"Last edited now set to : {exercise.LastEdited}");
    }

    // deleting an item
    private void DeleteItem(Exercise exercise)
    {
        exercises.Remove(exercise);
        // Update the sorted list after deleting the item
        SortedListItems.Remove(exercise);
    }

    // Toggle favourite
    private void ToggleFavorite(Exercise exercise)
    {
        exercise.IsFavorite = !exercise.IsFavorite;
        Console.WriteLine($"{exercise.Name} is favorited : {exercise.IsFavorite}");
    }

    // Last used on click
    private void UpdateLastUsed(Exercise exercise)
    {
        exercise.LastUsed = DateTime.Now;
        Console.WriteLine($"{exercise.Name} was last used : {exercise.LastUsed}");
    }

    private void ToggleDropdown()
    {
        isDropdownOpen = !isDropdownOpen;
    }
}
